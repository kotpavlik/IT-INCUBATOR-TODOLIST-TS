{"version":3,"sources":["components/todo_list/TodoList.module.css","components/addItemForm/AddItemForm.module.css","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan..tsx","components/todo_list/TodoList.tsx","components/lottie/LottieAnimation.tsx","reducers/TodoLists-reducer.ts","reducers/Tasks-reducer.ts","localStorage/LocalStorage.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","taskName","setTaskName","error","setError","addTask","trimTaskName","trim","addItem","styleInputError","style","error_input","input_style","className","add_input_wrapper","error_message","value","onChange","e","currentTarget","onKeyPress","alert","ctrlKey","charCode","onClick","no_active_button","buttonName","EditableSpan","editMode","setEditMode","title","newTitle","setNewTitle","activeEditMode","editTitle","autoFocus","onBlur","onDoubleClick","label","inputProps","TodoList","tasksListItems","tasks","length","map","el","key","id","task","Checkbox","size","checked","isDone","changeIsDoneTask","todoId","IsDone","IsDone_false","renameTasks","IconButton","aria-label","removeTasks","fontSize","no_tasks","styleButtonAllActive","filter","active_button","styleButtonActiveActive","styleButtonCompletedActive","wrapper_all_tasks","wrapper_all","title_task","renameTodoList","delete_task","removeTodoList","DeleteOutlined","addTasks","tasks_list","changeFilter","overflow","borderRadius","width","height","marginBottom","position","bottom","ExampleAnimation","options","animationData","groovyWalkAnimation","loop","autoplay","useLottie","View","todoListsReducer","state","action","type","payload","todoListId","td","newId","tasksReducer","v1","taskId","setToLocalStorage","keyName","localStorage","setItem","JSON","stringify","App","tasksID_1","tasksID_2","useReducer","newValue_todoLists","getItem","parse","todoLists","dispatchTodoLists","newValue_tasksObj","tasksObj","dispatchTasksObj","removeTasksAC","addTasksAC","changeFilterTaskAC","changeIsDoneTaskAC","removeTodoListAC","removeTodoListAndTasksAC","renameTodoListAC","renameTasksAC","useEffect","addNewTodoListsAC","addNewTodoListsAndTasksAC","tl","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.73196372.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_all_tasks\":\"TodoList_wrapper_all_tasks__1XMVl\",\"title_task\":\"TodoList_title_task__1x-U-\",\"wrapper_all\":\"TodoList_wrapper_all__BX3uO\",\"active_button\":\"TodoList_active_button__3z7gj\",\"no_active_button\":\"TodoList_no_active_button__19NhK\",\"task\":\"TodoList_task__1GkR1\",\"tasks_list\":\"TodoList_tasks_list__zH9Hx\",\"del\":\"TodoList_del__2QJW1\",\"IsDone_false\":\"TodoList_IsDone_false__1tOI-\",\"IsDone\":\"TodoList_IsDone__1mkDC\",\"no_tasks\":\"TodoList_no_tasks__KOCTl\",\"noTasks\":\"TodoList_noTasks__24NQq\",\"delete_task\":\"TodoList_delete_task__Jiutd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add_input_wrapper\":\"AddItemForm_add_input_wrapper__1CfSd\",\"error_message\":\"AddItemForm_error_message__1S2Fs\",\"fadeIn\":\"AddItemForm_fadeIn__Q72De\",\"error_input\":\"AddItemForm_error_input__3ymkl\",\"input_style\":\"AddItemForm_input_style__1J0JU\",\"active_button\":\"AddItemForm_active_button__3S7FE\",\"no_active_button\":\"AddItemForm_no_active_button__3Wu_A\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport style from './AddItemForm.module.css';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    buttonName: string\n}\n\nexport const  AddItemForm = (props: AddItemFormPropsType) => {\n\n    const [taskName, setTaskName] = useState<string>('');\n    const [error, setError] = useState<string | null>(null);\n\n    const addTask = () => {\n        let trimTaskName = taskName.trim();\n        if (trimTaskName) {\n            props.addItem(trimTaskName);\n            setTaskName('');\n        } else {\n            setError('Title is required');\n        }\n\n    };\n    const onChangeHandlerTaskName = (e: ChangeEvent<HTMLInputElement>) => {\n        setTaskName(e.currentTarget.value);\n        setError(null);\n    };\n    const onKeyPressHandlerTaskName = (e: KeyboardEvent<HTMLInputElement>) => {\n        let trimTaskName = taskName.trim();\n        if (trimTaskName === 'wtf' || trimTaskName === 'fuck') {\n            setTaskName('');\n            alert('не ругайся')\n            return;\n        }\n        if (e.ctrlKey && e.charCode === 13) {\n            addTask();\n        }\n    };\n    const styleInputError = error ? style.error_input : style.input_style;\n\n\n    return (\n        <div className={style.add_input_wrapper}>\n            {error && <span className={style.error_message}>{error}</span>}\n            <input\n                value={taskName}\n                onChange={onChangeHandlerTaskName}\n                onKeyPress={onKeyPressHandlerTaskName}\n                className={styleInputError}/>\n            <button onClick={addTask} className={style.no_active_button}>{props.buttonName}</button>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from 'react';\n\n\ntype EditableSpanPropsType = {\n    title: string\n    editTitle: (newTitle: string) => void\n}\nconst EditableSpan = (props: EditableSpanPropsType) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [newTitle, setNewTitle] = useState(props.title);\n\n\n    const activeEditMode = () => {\n        setEditMode(!editMode)\n        props.editTitle(newTitle)\n    }\n\n    const onChangeTitleHandler = (e:ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value)\n    }\n\n    return (\n\n        editMode\n            ? <input autoFocus onChange={onChangeTitleHandler} onBlur={activeEditMode} value={newTitle}/>\n            : <span onDoubleClick={activeEditMode}>{props.title}</span>\n\n    );\n};\n\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\nimport {FilterValuesType} from '../../App';\nimport style from './TodoList.module.css'\nimport {DeleteOutlined} from '@ant-design/icons';\nimport {AddItemForm} from '../addItemForm/AddItemForm';\nimport EditableSpan from '../editableSpan/EditableSpan.';\nimport {IconButton} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Checkbox from '@mui/material/Checkbox';\n\n\nconst label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n\n\ntype TodoListPropsTypeTitle = {\n    todoId: string\n    title: string;\n    tasks: Array<TaskType>;\n    filter: FilterValuesType;\n    removeTasks: (id: string, todoListId: string) => void;\n    changeFilter: (value: FilterValuesType, todoListId: string) => void;\n    addTasks: (taskName: string, todoListId: string) => void;\n    changeIsDoneTask: (taskId: string, isDone: boolean, todoListId: string) => void;\n    removeTodoList: (todoListId: string) => void\n    renameTodoList: (newTitle: string, todoId: string) => void\n    renameTasks:(newTitle:string, taskId:string, todoListId:string) => void\n};\n\nexport type TaskType = {\n    //  если убрать здесь export в файле где он импортируется не нужно явно типизировать массив, TS это сделает сам.\n    // Но это не правельный подход, по скольку всё должно быть явно типизировано\n    id: string;\n    title: string;\n    isDone: boolean;\n};\n\n\n\nconst TodoList = (props: TodoListPropsTypeTitle) => {\n\n\n    const onClickAllHandler = () => {\n        props.changeFilter('all', props.todoId)\n    };\n    const onClickActiveHandler = () => {\n        props.changeFilter('active', props.todoId)\n    };\n    const onClickCompletedHandler = () => {\n        props.changeFilter('completed', props.todoId)\n    };\n    const onClickRemoveTodoList = () => {\n        props.removeTodoList(props.todoId)\n\n    }\n    const addTask = (title: string) => {\n        return props.addTasks(title, props.todoId)\n    }\n    const editTitleHandler =(newTitle: string) => {\n        props.renameTodoList(newTitle, props.todoId)\n    }\n\n    const tasksListItems = props.tasks.length\n        ? props.tasks.map((el) => {\n            const onClickRemoveTask = () => {\n                props.removeTasks(el.id, props.todoId);\n            };\n            const onClickIsDoneTask = (e:ChangeEvent<HTMLInputElement>) => {\n                props.changeIsDoneTask(el.id, e.currentTarget.checked, props.todoId);\n            }\n            const editTitleTasksHandler = (newTitle: string) => {\n                props.renameTasks(newTitle, el.id, props.todoId)\n            }\n\n\n\n            return (\n                <li key={el.id} className={style.task}>\n                    <Checkbox {...label}  size=\"small\" checked={el.isDone}\n                              onChange={onClickIsDoneTask} />\n\n                    <span\n                        className={el.isDone ? style.IsDone : style.IsDone_false}>\n                                    <EditableSpan title={el.title} editTitle={editTitleTasksHandler}/></span>\n\n                    <IconButton aria-label=\"delete\" size=\"small\"  onClick={onClickRemoveTask}>\n                        <DeleteIcon fontSize=\"small\" />\n                    </IconButton>\n                </li>\n            );\n        })\n        : <span className={style.no_tasks}>No tasks</span>;\n    const styleButtonAllActive = props.filter === 'all' ? style.active_button : style.no_active_button;\n    const styleButtonActiveActive = props.filter === 'active' ? style.active_button : style.no_active_button;\n    const styleButtonCompletedActive = props.filter === 'completed' ? style.active_button : style.no_active_button;\n\n\n    return (\n        <div className={style.wrapper_all_tasks}>\n            <div className={style.wrapper_all}>\n                <h3 className={style.title_task}>\n                    <EditableSpan title={props.title} editTitle={editTitleHandler}/>\n                    <span\n                        className={style.delete_task}\n                        onClick={onClickRemoveTodoList}\n                    ><DeleteOutlined/>\n                    </span>\n                </h3>\n                <AddItemForm addItem={addTask} buttonName={'send'}/>\n                <ul className={style.tasks_list}>\n                    {tasksListItems}\n                </ul>\n                <div>\n                    <button\n                        className={styleButtonAllActive}\n                        onClick={onClickAllHandler}>All\n                    </button>\n                    <button\n                        className={styleButtonActiveActive}\n                        onClick={onClickActiveHandler}>Active\n                    </button>\n                    <button\n                        className={styleButtonCompletedActive}\n                        onClick={onClickCompletedHandler}>Completed\n                    </button>\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TodoList;\n\n\n","import  {useLottie} from 'lottie-react';\nimport groovyWalkAnimation from \"./ton_duck_agadsxcaakcuoes.json\";\nimport {CSSProperties} from 'react';\n\n\nconst style:CSSProperties = {\n    overflow: 'hidden',\n    borderRadius: 100,\n    width: 70,\n    height: 90,\n    marginBottom: -20,\n    position:\"absolute\",\n    bottom:10,\n};\nexport const ExampleAnimation = () => {\n    const options = {\n        animationData: groovyWalkAnimation,\n        loop: true,\n        autoplay: true,\n    }\n\n    const { View } = useLottie(options, style);\n\n    return View;\n}\n","import {FilterValuesType, TodoListsType} from '../App';\n\n\n\nexport const todoListsReducer = (state: Array<TodoListsType>, action:todoListsReducerType):Array<TodoListsType> => {\n    switch (action.type) {\n        case 'CHANGE_FILTER_TODO_LIST': {\n            return state.map(el => el.id === action.payload.todoListId ? {...el, filter: action.payload.value} : el)\n        }\n        case 'REMOVE_TODO_LIST': {\n            return state.filter(td => td.id !== action.payload.todoListId)\n        }\n        case 'ADD_NEW_TODO_LIST':{\n            return [...state, {id: action.payload.newId, title:action.payload.title, filter: 'all'}];\n        }\n        case 'RENAME_TODO_LIST': {\n            return state.map(el => el.id === action.payload.todoListId ? {...el, title: action.payload.newTitle} : el)\n        }\n        default:\n            return state;\n    }\n}\n\ntype todoListsReducerType = changeFilterTaskACType | removeTodoListACType | addNewTodoListsACType | renameTodoListACType\n\ntype changeFilterTaskACType = ReturnType<typeof changeFilterTaskAC>\nexport const changeFilterTaskAC = (value: FilterValuesType, todoListId: string) => {\n    return {\n        type: 'CHANGE_FILTER_TODO_LIST',\n        payload: {value, todoListId}\n    } as const\n}\ntype removeTodoListACType = ReturnType<typeof removeTodoListAC>\nexport const removeTodoListAC = (todoListId: string) => {\n    return {\n        type: 'REMOVE_TODO_LIST',\n        payload: {todoListId}\n    } as const\n}\ntype addNewTodoListsACType = ReturnType<typeof addNewTodoListsAC>\nexport const addNewTodoListsAC = (title: string,newId:string) => {\n    return {\n        type: 'ADD_NEW_TODO_LIST',\n        payload: {title,newId}\n    } as const\n}\ntype renameTodoListACType = ReturnType<typeof renameTodoListAC>\nexport const renameTodoListAC = (newTitle: string,todoListId:string) => {\n    return {\n        type: 'RENAME_TODO_LIST',\n        payload: {newTitle,todoListId}\n    } as const\n}\n","import {TasksObjType} from '../App';\nimport {v1} from 'uuid';\n\n\n\n\nexport const tasksReducer = (state: TasksObjType, action: tasksReducerACType): TasksObjType => {\n    switch (action.type) {\n        case 'REMOVE_TASKS': {\n            let tasks = state[action.payload.todoListId];\n            state[action.payload.todoListId] = tasks.filter((el) => el.id !== action.payload.id);\n            return {...state}\n        }\n        case 'ADD_TASKS': {\n            return {\n                ...state, [action.payload.todoListId]: [\n                    ...state[action.payload.todoListId], {id: v1(), title: action.payload.taskName, isDone: false}\n                ]\n            }\n        }\n        case 'CHANGE_IS_DONE_TASK': {\n            return {\n                ...state,\n                [action.payload.todoListId]: state[action.payload.todoListId]\n                    .map(el => el.id === action.payload.taskId ? {...el, isDone: action.payload.isDone} : el)\n            }\n        }\n        case 'REMOVE_TODO_LIST_AND_TASKS': {\n            delete state[action.payload.todoListId];\n            return  {...state}\n        }\n        case 'ADD_NEW_TODO_LIST_AND_TASKS' : {\n          return {...state, [action.payload.id]: []};\n        }\n        case 'RENAME_TASKS': {\n            return {\n                ...state,\n                [action.payload.todoListId]:\n                    state[action.payload.todoListId]\n                        .map(el => el.id === action.payload.taskId ? {...el, title:action.payload.newTitle} : el)\n            }\n        }\n        default:\n            return state;\n    }\n}\n\ntype tasksReducerACType = removeTasksACType | addTasksACType | changeIsDoneTaskAC |\n    removeTodoListAndTasksACType | addNewTodoListsAndTasksACType | renameTasksACType\ntype removeTasksACType = ReturnType<typeof removeTasksAC>\nexport const removeTasksAC = (id: string, todoListId: string) => {\n    return {\n        type: 'REMOVE_TASKS',\n        payload: {id, todoListId}\n    } as const\n}\n\ntype addTasksACType = ReturnType<typeof addTasksAC>\nexport const addTasksAC = (taskName: string, todoListId: string) => {\n    return {\n        type: 'ADD_TASKS',\n        payload: {taskName, todoListId}\n    } as const\n}\n\ntype changeIsDoneTaskAC = ReturnType<typeof changeIsDoneTaskAC>\nexport const changeIsDoneTaskAC = (taskId: string, isDone: boolean, todoListId: string) => {\n    return {\n        type: 'CHANGE_IS_DONE_TASK',\n        payload: {taskId, isDone, todoListId}\n    } as const\n}\n\ntype removeTodoListAndTasksACType = ReturnType<typeof removeTodoListAndTasksAC>\nexport const removeTodoListAndTasksAC = (todoListId:string) => {\n    return {\n        type: 'REMOVE_TODO_LIST_AND_TASKS',\n        payload: {todoListId}\n    } as const\n}\n\ntype addNewTodoListsAndTasksACType = ReturnType<typeof addNewTodoListsAndTasksAC>\nexport const addNewTodoListsAndTasksAC =(id:string)=> {\n    return {\n        type: 'ADD_NEW_TODO_LIST_AND_TASKS',\n        payload: {id}\n    } as const\n}\n\ntype renameTasksACType = ReturnType<typeof renameTasksAC>\nexport const renameTasksAC =(newTitle:string,taskId:string,todoListId:string)=> {\n    return {\n        type: 'RENAME_TASKS',\n        payload: {newTitle,taskId,todoListId}\n    } as const\n}\n\n","\nexport function setToLocalStorage<T>(keyName:string, value:T) {\n    localStorage.setItem(keyName, JSON.stringify(value))\n}\n\nexport function getToLocalStorage(keyName:string)  {\n    let newValue_todoLists = localStorage.getItem(keyName);\n    if (newValue_todoLists) {\n        let new_start_value = JSON.parse(newValue_todoLists);\n        return new_start_value\n    }\n}","import React, {useEffect, useReducer} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from './components/todo_list/TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './components/addItemForm/AddItemForm';\r\nimport {ExampleAnimation} from './components/lottie/LottieAnimation';\r\nimport {\r\n    addNewTodoListsAC,\r\n    changeFilterTaskAC,\r\n    removeTodoListAC,\r\n    renameTodoListAC,\r\n    todoListsReducer\r\n} from './reducers/TodoLists-reducer';\r\nimport {\r\n    addNewTodoListsAndTasksAC,\r\n    addTasksAC,\r\n    changeIsDoneTaskAC,\r\n    removeTasksAC,\r\n    removeTodoListAndTasksAC, renameTasksAC,\r\n    tasksReducer\r\n} from './reducers/Tasks-reducer';\r\nimport {setToLocalStorage} from './localStorage/LocalStorage';\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\nexport type TasksObjType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const tasksID_1 = v1();\r\n    const tasksID_2 = v1();\r\n\r\n    const getTasksObjLocalStorage = () => {\r\n        let newValue_tasksObj = localStorage.getItem('value_tasks');\r\n        if (newValue_tasksObj) {\r\n            let new_start_value = JSON.parse(newValue_tasksObj);\r\n            return new_start_value\r\n        }\r\n    }\r\n    const getTodoListsLocalStorage = () => {\r\n        let newValue_todoLists = localStorage.getItem('value_todoLists');\r\n        if (newValue_todoLists) {\r\n            let new_start_value = JSON.parse(newValue_todoLists);\r\n            return new_start_value\r\n        }\r\n    }\r\n\r\n    let [todoLists, dispatchTodoLists] = useReducer(todoListsReducer,\r\n        [\r\n            {id: tasksID_1, title: 'What learn', filter: 'all'},\r\n            {id: tasksID_2, title: 'What buy', filter: 'all'}\r\n        ], getTodoListsLocalStorage);\r\n\r\n    let [tasksObj, dispatchTasksObj] = useReducer(tasksReducer, {\r\n            [tasksID_1]: [\r\n                {id: v1(), title: 'HTML', isDone: true},\r\n                {id: v1(), title: 'CSS', isDone: false},\r\n                {id: v1(), title: 'JS', isDone: true},\r\n                {id: v1(), title: 'JS', isDone: true},\r\n                {id: v1(), title: 'JS', isDone: true},\r\n            ],\r\n            [tasksID_2]: [\r\n                {id: v1(), title: 'Bread', isDone: true},\r\n                {id: v1(), title: 'Milk', isDone: false}\r\n            ]\r\n        }, getTasksObjLocalStorage\r\n    );\r\n\r\n\r\n    useEffect(() => {\r\n        setToLocalStorage('value_todoLists', todoLists)\r\n    }, [todoLists]);\r\n    useEffect(() => {\r\n        setToLocalStorage('value_tasks', tasksObj)\r\n    }, [tasksObj]);\r\n\r\n    function removeTasks(id: string, todoListId: string) {\r\n        dispatchTasksObj(removeTasksAC(id, todoListId))\r\n    }\r\n\r\n    function addTasks(taskName: string, todoListId: string) {\r\n        dispatchTasksObj(addTasksAC(taskName, todoListId))\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        dispatchTodoLists(changeFilterTaskAC(value, todoListId))\r\n\r\n    }\r\n\r\n    function changeIsDoneTask(taskId: string, isDone: boolean, todoListId: string) {\r\n\r\n        dispatchTasksObj(changeIsDoneTaskAC(taskId, isDone, todoListId))\r\n    }\r\n\r\n    function removeTodoList(todoListId: string) {\r\n        dispatchTodoLists(removeTodoListAC(todoListId))\r\n        dispatchTasksObj(removeTodoListAndTasksAC(todoListId))\r\n    }\r\n\r\n    function addNewTodoLists(title: string) {\r\n        let id: string = v1();\r\n        dispatchTodoLists(addNewTodoListsAC(title, id))\r\n        dispatchTasksObj(addNewTodoListsAndTasksAC(id))\r\n    }\r\n\r\n    function renameTodoList(newTitle: string, todoListId: string) {\r\n        dispatchTodoLists(renameTodoListAC(newTitle, todoListId))\r\n    }\r\n\r\n    function renameTasks(newTitle: string, taskId: string, todoListId: string) {\r\n        dispatchTasksObj(renameTasksAC(newTitle, taskId, todoListId))\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <div className=\"title_plus_lottie\">\r\n                <div className=\"global_title\"> YourToDo</div>\r\n                <span><ExampleAnimation/></span>\r\n            </div>\r\n            <div className=\"addNewTodoLists\">\r\n                <AddItemForm addItem={addNewTodoLists} buttonName={'add'}/>\r\n            </div>\r\n            <div className=\"wrapper_global_all\">\r\n\r\n                {todoLists.map((tl: TodoListsType) => {\r\n                    let tasksForTodoList = tasksObj[tl.id];\r\n                    if (tl.filter === 'active') {\r\n                        tasksForTodoList = tasksForTodoList.filter((el) => el.isDone === false);\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        tasksForTodoList = tasksForTodoList.filter((el) => el.isDone === true);\r\n                    }\r\n                    return (\r\n                        <TodoList\r\n                            key={tl.id}\r\n                            todoId={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodoList}\r\n                            filter={tl.filter}\r\n                            removeTasks={removeTasks}\r\n                            changeFilter={changeFilter}\r\n                            addTasks={addTasks}\r\n                            changeIsDoneTask={changeIsDoneTask}\r\n                            removeTodoList={removeTodoList}\r\n                            renameTodoList={renameTodoList}\r\n                            renameTasks={renameTasks}\r\n                        />\r\n                    )\r\n                })}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}