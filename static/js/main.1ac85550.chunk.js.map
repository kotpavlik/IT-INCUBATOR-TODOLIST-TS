{"version":3,"sources":["components/todo_list/TodoList.module.css","components/addItemForm/AddItemForm.module.css","components/addItemForm/AddItemForm.tsx","components/editableSpan/EditableSpan..tsx","components/todo_list/TodoList.tsx","components/lottie/LottieAnimation.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","AddItemForm","props","useState","taskName","setTaskName","error","setError","addTask","trimTaskName","trim","addItem","styleInputError","style","error_input","input_style","className","add_input_wrapper","error_message","value","onChange","e","currentTarget","onKeyPress","alert","ctrlKey","charCode","onClick","no_active_button","buttonName","EditableSpan","editMode","setEditMode","title","newTitle","setNewTitle","activeEditMode","editTitle","autoFocus","onBlur","onDoubleClick","label","inputProps","TodoList","tasksListItems","tasks","length","map","el","key","id","task","Checkbox","defaultChecked","size","checked","isDone","changeIsDoneTask","todoId","IsDone","IsDone_false","renameTasks","IconButton","aria-label","removeTasks","fontSize","no_tasks","styleButtonAllActive","filter","active_button","styleButtonActiveActive","styleButtonCompletedActive","wrapper_all_tasks","wrapper_all","title_task","renameTodoList","delete_task","removeTodoList","DeleteOutlined","addTasks","tasks_list","changeFilter","overflow","borderRadius","width","height","marginBottom","position","bottom","ExampleAnimation","options","animationData","groovyWalkAnimation","loop","autoplay","useLottie","View","App","tasksID_1","v1","tasksID_2","newValue_todoLists","localStorage","getItem","JSON","parse","todoLists","setTodoLists","newValue_tasksObj","tasksObj","setTasksObj","todoListId","filteredTasks","newTask","taskId","newTodoList","td","useEffect","setItem","stringify","addNewTodolist","addNewTasksObj","tl","tasksForTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.1ac85550.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper_all_tasks\":\"TodoList_wrapper_all_tasks__1XMVl\",\"title_task\":\"TodoList_title_task__1x-U-\",\"wrapper_all\":\"TodoList_wrapper_all__BX3uO\",\"active_button\":\"TodoList_active_button__3z7gj\",\"no_active_button\":\"TodoList_no_active_button__19NhK\",\"task\":\"TodoList_task__1GkR1\",\"tasks_list\":\"TodoList_tasks_list__zH9Hx\",\"del\":\"TodoList_del__2QJW1\",\"IsDone_false\":\"TodoList_IsDone_false__1tOI-\",\"IsDone\":\"TodoList_IsDone__1mkDC\",\"no_tasks\":\"TodoList_no_tasks__KOCTl\",\"noTasks\":\"TodoList_noTasks__24NQq\",\"delete_task\":\"TodoList_delete_task__Jiutd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"add_input_wrapper\":\"AddItemForm_add_input_wrapper__1CfSd\",\"error_message\":\"AddItemForm_error_message__1S2Fs\",\"fadeIn\":\"AddItemForm_fadeIn__Q72De\",\"error_input\":\"AddItemForm_error_input__3ymkl\",\"input_style\":\"AddItemForm_input_style__1J0JU\",\"active_button\":\"AddItemForm_active_button__3S7FE\",\"no_active_button\":\"AddItemForm_no_active_button__3Wu_A\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport style from './AddItemForm.module.css';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    buttonName: string\n}\n\nexport const  AddItemForm = (props: AddItemFormPropsType) => {\n\n    const [taskName, setTaskName] = useState<string>('');\n    const [error, setError] = useState<string | null>(null);\n\n    const addTask = () => {\n        let trimTaskName = taskName.trim();\n        if (trimTaskName) {\n            props.addItem(trimTaskName);\n            setTaskName('');\n        } else {\n            setError('Title is required');\n        }\n\n    };\n    const onChangeHandlerTaskName = (e: ChangeEvent<HTMLInputElement>) => {\n        setTaskName(e.currentTarget.value);\n        setError(null);\n    };\n    const onKeyPressHandlerTaskName = (e: KeyboardEvent<HTMLInputElement>) => {\n        let trimTaskName = taskName.trim();\n        if (trimTaskName === 'wtf' || trimTaskName === 'fuck') {\n            setTaskName('');\n            alert('не ругайся')\n            return;\n        }\n        if (e.ctrlKey && e.charCode === 13) {\n            addTask();\n        }\n    };\n    const styleInputError = error ? style.error_input : style.input_style;\n\n\n    return (\n        <div className={style.add_input_wrapper}>\n            {error && <span className={style.error_message}>{error}</span>}\n            <input\n                value={taskName}\n                onChange={onChangeHandlerTaskName}\n                onKeyPress={onKeyPressHandlerTaskName}\n                className={styleInputError}/>\n            <button onClick={addTask} className={style.no_active_button}>{props.buttonName}</button>\n        </div>\n    )\n}","import React, {ChangeEvent, useState} from 'react';\n\n\ntype EditableSpanPropsType = {\n    title: string\n    editTitle: (newTitle: string) => void\n}\nconst EditableSpan = (props: EditableSpanPropsType) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [newTitle, setNewTitle] = useState(props.title);\n\n\n    const activeEditMode = () => {\n        setEditMode(!editMode)\n        props.editTitle(newTitle)\n    }\n\n    const onChangeTitleHandler = (e:ChangeEvent<HTMLInputElement>) => {\n        setNewTitle(e.currentTarget.value)\n    }\n\n    return (\n\n        editMode\n            ? <input autoFocus onChange={onChangeTitleHandler} onBlur={activeEditMode} value={newTitle}/>\n            : <span onDoubleClick={activeEditMode}>{props.title}</span>\n\n    );\n};\n\nexport default EditableSpan;","import React, {ChangeEvent} from 'react';\nimport {FilterValuesType} from '../../App';\nimport style from './TodoList.module.css'\nimport {DeleteOutlined} from '@ant-design/icons';\nimport {AddItemForm} from '../addItemForm/AddItemForm';\nimport EditableSpan from '../editableSpan/EditableSpan.';\nimport {IconButton} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport Checkbox from '@mui/material/Checkbox';\nimport FavoriteBorder from '@mui/icons-material/FavoriteBorder';\nimport Favorite from '@mui/icons-material/Favorite';\n\nconst label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n\n\ntype TodoListPropsTypeTitle = {\n    todoId: string\n    title: string;\n    tasks: Array<TaskType>;\n    filter: FilterValuesType;\n    removeTasks: (id: string, todoListId: string) => void;\n    changeFilter: (value: FilterValuesType, todoListId: string) => void;\n    addTasks: (taskName: string, todoListId: string) => void;\n    changeIsDoneTask: (taskId: string, isDone: boolean, todoListId: string) => void;\n    removeTodoList: (todoListId: string) => void\n    renameTodoList: (newTitle: string, todoId: string) => void\n    renameTasks:(newTitle:string, taskId:string, todoListId:string) => void\n};\n\nexport type TaskType = {\n    //  если убрать здесь export в файле где он импортируется не нужно явно типизировать массив, TS это сделает сам.\n    // Но это не правельный подход, по скольку всё должно быть явно типизировано\n    id: string;\n    title: string;\n    isDone: boolean;\n};\n\n\n\nconst TodoList = (props: TodoListPropsTypeTitle) => {\n\n\n    const onClickAllHandler = () => {\n        props.changeFilter('all', props.todoId)\n    };\n    const onClickActiveHandler = () => {\n        props.changeFilter('active', props.todoId)\n    };\n    const onClickCompletedHandler = () => {\n        props.changeFilter('completed', props.todoId)\n    };\n    const onClickRemoveTodoList = () => {\n        props.removeTodoList(props.todoId)\n\n    }\n    const addTask = (title: string) => {\n        return props.addTasks(title, props.todoId)\n    }\n    const editTitleHandler =(newTitle: string) => {\n        props.renameTodoList(newTitle, props.todoId)\n    }\n\n    const tasksListItems = props.tasks.length\n        ? props.tasks.map((el) => {\n            const onClickRemoveTask = () => {\n                props.removeTasks(el.id, props.todoId);\n            };\n            const onClickIsDoneTask = (e:ChangeEvent<HTMLInputElement>) => {\n                props.changeIsDoneTask(el.id, e.currentTarget.checked, props.todoId);\n            }\n            const editTitleTasksHandler = (newTitle: string) => {\n                props.renameTasks(newTitle, el.id, props.todoId)\n            }\n\n\n\n            return (\n                <li key={el.id} className={style.task}>\n                    <Checkbox {...label} defaultChecked size=\"small\" checked={el.isDone}\n                              onChange={onClickIsDoneTask} />\n\n                    <span\n                        className={el.isDone ? style.IsDone : style.IsDone_false}>\n                                    <EditableSpan title={el.title} editTitle={editTitleTasksHandler}/></span>\n\n                    <IconButton aria-label=\"delete\" size=\"small\"  onClick={onClickRemoveTask}>\n                        <DeleteIcon fontSize=\"small\" />\n                    </IconButton>\n                </li>\n            );\n        })\n        : <span className={style.no_tasks}>No tasks</span>;\n    const styleButtonAllActive = props.filter === 'all' ? style.active_button : style.no_active_button;\n    const styleButtonActiveActive = props.filter === 'active' ? style.active_button : style.no_active_button;\n    const styleButtonCompletedActive = props.filter === 'completed' ? style.active_button : style.no_active_button;\n\n\n    return (\n        <div className={style.wrapper_all_tasks}>\n            <div className={style.wrapper_all}>\n                <h3 className={style.title_task}>\n                    <EditableSpan title={props.title} editTitle={editTitleHandler}/>\n                    <span\n                        className={style.delete_task}\n                        onClick={onClickRemoveTodoList}\n                    ><DeleteOutlined/>\n                    </span>\n                </h3>\n                <AddItemForm addItem={addTask} buttonName={'send'}/>\n                <ul className={style.tasks_list}>\n                    {tasksListItems}\n                </ul>\n                <div>\n                    <button\n                        className={styleButtonAllActive}\n                        onClick={onClickAllHandler}>All\n                    </button>\n                    <button\n                        className={styleButtonActiveActive}\n                        onClick={onClickActiveHandler}>Active\n                    </button>\n                    <button\n                        className={styleButtonCompletedActive}\n                        onClick={onClickCompletedHandler}>Completed\n                    </button>\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default TodoList;\n\n\n","import  {useLottie} from 'lottie-react';\nimport groovyWalkAnimation from \"./ton_duck_agadsxcaakcuoes.json\";\nimport {CSSProperties} from 'react';\n\n\nconst style:CSSProperties = {\n    overflow: 'hidden',\n    borderRadius: 100,\n    width: 70,\n    height: 90,\n    marginBottom: -20,\n    position:\"absolute\",\n    bottom:10,\n};\nexport const ExampleAnimation = () => {\n    const options = {\n        animationData: groovyWalkAnimation,\n        loop: true,\n        autoplay: true,\n    }\n\n    const { View } = useLottie(options, style);\n\n    return View;\n}\n","import React, {useEffect, useState} from 'react';\r\nimport './App.css';\r\nimport TodoList, {TaskType} from './components/todo_list/TodoList';\r\nimport {v1} from 'uuid';\r\nimport {AddItemForm} from './components/addItemForm/AddItemForm';\r\nimport {ExampleAnimation} from './components/lottie/LottieAnimation';\r\n\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\ntype TodoListsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\ntype TasksObjType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    const tasksID_1 = v1();\r\n    const tasksID_2 = v1();\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListsType>>(\r\n        () => {\r\n            let newValue_todoLists = localStorage.getItem('value_todoLists');\r\n            if (newValue_todoLists) {\r\n                let new_start_value = JSON.parse(newValue_todoLists);\r\n                return new_start_value ||\r\n                    [{id: tasksID_1, title: 'What learn', filter: 'all'},\r\n                        {id: tasksID_2, title: 'What buy', filter: 'all'}];\r\n            }\r\n        });\r\n    let [tasksObj, setTasksObj] = useState<TasksObjType>(\r\n        () => {\r\n            let newValue_tasksObj = localStorage.getItem('value_tasks');\r\n            if (newValue_tasksObj) {\r\n                let new_start_value = JSON.parse(newValue_tasksObj);\r\n                return new_start_value ||\r\n                    {\r\n                        [tasksID_1]: [\r\n                            {id: v1(), title: 'HTML', isDone: true},\r\n                            {id: v1(), title: 'CSS', isDone: false},\r\n                            {id: v1(), title: 'JS', isDone: true},\r\n                            {id: v1(), title: 'JS', isDone: true},\r\n                            {id: v1(), title: 'JS', isDone: true},\r\n                        ],\r\n                        [tasksID_2]: [\r\n                            {id: v1(), title: 'Bread', isDone: true},\r\n                            {id: v1(), title: 'Milk', isDone: false}\r\n                        ]\r\n                    }\r\n            }\r\n        }\r\n    );\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('value_todoLists', JSON.stringify(todoLists))\r\n    }, [todoLists]);\r\n    useEffect(() => {\r\n        localStorage.setItem('value_tasks', JSON.stringify(tasksObj))\r\n    }, [tasksObj]);\r\n\r\n    function removeTasks(id: string, todoListId: string) {\r\n        let tasks = tasksObj[todoListId];\r\n        let filteredTasks = tasks.filter((el) => el.id !== id);\r\n        tasksObj[todoListId] = filteredTasks;\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function addTasks(taskName: string, todoListId: string) {\r\n        let tasks = tasksObj[todoListId];\r\n        let task: TaskType = {id: v1(), title: taskName, isDone: false};\r\n        let newTask = [...tasks, task]\r\n        tasksObj[todoListId] = newTask;\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todoListId: string) {\r\n        setTodoLists(todoLists.map(el => el.id === todoListId ? {...el, filter: value} : el))\r\n        // setTodoLists(todoLists.map(tl => {\r\n        //     if (tl.id === todoListId) {\r\n        //         return {...tl, filter: value}\r\n        //     }\r\n        //     return tl;\r\n        // }))\r\n    }\r\n\r\n    function changeIsDoneTask(taskId: string, isDone: boolean, todoListId: string) {\r\n        // let tasks = tasksObj[todoListId];\r\n        // let task = tasks.find(t => t.id === taskId);\r\n        // if (task) {\r\n        //     task.isDone = isDone;\r\n        // }\r\n        // tasksObj[todoListId] = tasks;\r\n        // setTasksObj({...tasksObj})\r\n        setTasksObj({\r\n            ...tasksObj,\r\n            [todoListId]: tasksObj[todoListId].map(el => el.id === taskId ? {...el, isDone} : el)\r\n        })\r\n    }\r\n\r\n    function removeTodoList(todoListId: string) {\r\n        let newTodoList = todoLists.filter(td => td.id !== todoListId)\r\n        setTodoLists(newTodoList);\r\n        delete tasksObj[todoListId];\r\n        setTasksObj({...tasksObj});\r\n    }\r\n\r\n    function addNewTodoLists(title: string) {\r\n        let newTodoList: TodoListsType = {id: v1(), title, filter: 'all'};\r\n        let addNewTodolist = [...todoLists, newTodoList];\r\n        let addNewTasksObj = {...tasksObj, [newTodoList.id]: []};\r\n        setTodoLists(addNewTodolist);\r\n        setTasksObj(addNewTasksObj);\r\n    }\r\n\r\n    function renameTodoList(newTitle: string, todoListId: string) {\r\n        setTodoLists(todoLists.map(el => el.id === todoListId ? {...el, title: newTitle} : el))\r\n    }\r\n\r\n    function renameTasks(newTitle: string, taskId: string, todoListId: string) {\r\n        setTasksObj({\r\n            ...tasksObj,\r\n            [todoListId]: tasksObj[todoListId].map(el => el.id === taskId ? {...el, title: newTitle} : el)\r\n        })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n\r\n            <div className=\"title_plus_lottie\">\r\n                <div className=\"global_title\"> YourToDo</div>\r\n                <span><ExampleAnimation/></span>\r\n            </div>\r\n            <div className=\"addNewTodoLists\">\r\n                <AddItemForm addItem={addNewTodoLists} buttonName={'add'}/>\r\n            </div>\r\n            <div className=\"wrapper_global_all\">\r\n\r\n                {todoLists.map((tl) => {\r\n                    let tasksForTodoList = tasksObj[tl.id];\r\n                    if (tl.filter === 'active') {\r\n                        tasksForTodoList = tasksForTodoList.filter((el) => el.isDone === false);\r\n                    }\r\n                    if (tl.filter === 'completed') {\r\n                        tasksForTodoList = tasksForTodoList.filter((el) => el.isDone === true);\r\n                    }\r\n                    return (\r\n                        <TodoList\r\n                            key={tl.id}\r\n                            todoId={tl.id}\r\n                            title={tl.title}\r\n                            tasks={tasksForTodoList}\r\n                            filter={tl.filter}\r\n                            removeTasks={removeTasks}\r\n                            changeFilter={changeFilter}\r\n                            addTasks={addTasks}\r\n                            changeIsDoneTask={changeIsDoneTask}\r\n                            removeTodoList={removeTodoList}\r\n                            renameTodoList={renameTodoList}\r\n                            renameTasks={renameTasks}\r\n                        />\r\n                    )\r\n                })}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}